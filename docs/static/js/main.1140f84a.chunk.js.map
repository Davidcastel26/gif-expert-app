{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","categs","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","imgs","GifGridItem","className","src","alt","GifGrid","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAwCeA,EArCY,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAmBA,OACI,sBAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAIEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAM,OAAMP,GAAN,mBAAqBO,OAC1CN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAtBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCTzBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACNC,EADM,iDAC2CC,UAAUH,GADrD,+DAGOI,MAAOF,GAHd,cAGNG,EAHM,gBAISA,EAAKC,OAJd,uBAILC,EAJK,EAILA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAV9B,kBAgBLM,GAhBK,4CAAH,sDAmBET,ICQAgB,EAxBM,SAAEf,GAEnB,MAA0Bd,mBAAS,CAC/BqB,KAAK,GACLS,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAW,WAEPpB,EAASC,GACJoB,MAAM,SAAAC,GAEHH,EAAS,CACLX,KAAMc,EACNL,SAAS,SAIvB,CAAChB,IAEIiB,GCHIK,MAjBf,YAAqC,IAAdV,EAAa,EAAbA,MAAOV,EAAM,EAANA,IAI1B,OACI,sBAAKqB,UAAU,yCAAf,UAEI,qBAAKC,IAAKtB,EAAKuB,IAAKb,IACpB,kCAAKA,EAAL,WCiBGc,EAxBC,SAAC,GAAgB,IAAf1B,EAAc,EAAdA,SAEd,EAAiCe,EAAaf,GAAjCa,EAAb,EAAQN,KAAaS,EAArB,EAAqBA,QAErB,OACI,qCACI,qBAAIO,UAAU,oCAAd,cAAoDvB,EAApD,OAEEgB,GAAW,mBAAGO,UAAU,mCAAb,2CAEb,qBAAKA,UAAU,YAAf,SAEQV,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEIA,GADEA,EAAIC,aCuBnBgB,EApCM,WAKjB,MAAoCzC,mBAAS,CAAC,WAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAMA,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAACT,GAAD,OACZ,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCpBlC6B,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.1140f84a.chunk.js","sourcesContent":["import {useState} from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setinputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        // console.log(e.target.value);\n        setinputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        // console.log('sub done');\n        // we are calling categories\n\n        if( inputValue.trim().length > 2){\n            setCategories( categs => [ inputValue, ...categs ] )\n            setinputValue('')\n        }\n\n    } \n\n    return (\n        <form onSubmit={ handleSubmit }>  \n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n}\n\nexport default AddCategory;","const getGifs = async( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=AYhFpbImnSFFHIwxeoq82SNAeF5iDQXX`\n\n    const resp = await fetch( url );\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    // console.log(gifs);\n    // setImages( gifs )\n    return gifs;\n}\n\nexport default getGifs;","import { useState, useEffect } from 'react';\nimport  getGifs  from '../helpers/getGifs';\n\nconst useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data:[],\n        loading: true\n    });\n\n    useEffect( () => {\n\n        getGifs( category )\n            .then( imgs => {\n\n                setState({\n                    data: imgs,\n                    loading: false\n                })\n\n            })\n    },[category])\n\n    return state; // { data : [], loading: true}\n\n}\n\nexport default useFetchGifs;\n\n\n\n   // setTimeout(() => {\n    //     setState({\n    //         data:[1,2,3,4,5,6,7],\n    //         loading: false\n    //     })\n    // }, 3000)","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction GifGridItem({ title, url}) {\n\n    // console.log({id, title,url});\n\n    return (\n        <div className='card animate__animated animate__fadeIn'>\n            {/* {img.title} */}\n            <img src={url} alt={title} />\n            <p> {title} </p>\n        </div>\n    )\n}\n\nGifGridItem.propTypes = {\n\n}\n\nexport default GifGridItem;\n\n","import React /*, {useState, useEffect}*/ from 'react'\nimport useFetchGifs from '../hooks/useFetchGifs'\nimport GifGridItem from './GifGridItem'\n\nconst GifGrid = ({category}) => {\n\n    const { data:images, loading } = useFetchGifs(category);\n\n    return (\n        <>\n            <h3 className='animate__animated animate__fadeIn'> {category} </h3>\n\n            { loading && <p className='animate__animated animate__flash'>Loading at this moment bro...</p>}\n\n            <div className='card-grid'>\n                {\n                    images.map( img =>(\n                        <GifGridItem \n                        key={ img.id}\n                        {...img}\n                        /> \n                    ))\n                }\n            </div>\n        </>\n    )\n}\n\nexport default GifGrid;\n\n\n\n\n\n\n\n\n\n// import getGifs from '../helpers/getGifs'\n\n    // const [count, setCount] = useState(1)\n    // console.log(data, loading);\n\n/*const [images, setImages] = useState([]) */\n\n\n// useEffect( () => {\n    // getGifs( category )\n        // .then(imgs => setImages(imgs))\n        // .then( setImages )\n// }, [category])\n\n\n// images.map( ({id, title}) =>(\n    // <li key={ id}> { title} </li>\n// ))\n\n// {/* <h3> { count } </h3> */}\n// {/* <button onClick={ () => setCount( count + 1)}></button> */}","import React, {useState} from 'react'\n// import PropTypes from 'prop-types'\nimport AddCategory from './components/AddCategory'\nimport GifGrid from './components/GifGrid'\n\nconst GifExpertApp = () => {\n\n    // const pikey = 'AYhFpbImnSFFHIwxeoq82SNAeF5iDQXX'\n\n    // const categories = ['One Punche Man','Naruto','Arcane']\n    const [categories, setCategories] = useState(['Arcane'])\n    // let newItem = `Game Of Thrones`;\n    // const handleAdd = () => {\n    //     setCategories([...categories, newItem])\n    // }\n\n    return (\n        <>\n            <h2>Gif Expert App</h2>\n            <AddCategory setCategories={ setCategories } />\n            <hr />\n\n            <ol>\n                { \n                    categories.map( (category) => (\n                        <GifGrid \n                            key={ category }\n                            category={ category }\n                        /> \n                    ))\n                }        \n            </ol>\n            \n        </>\n    )\n}\n\n// GifExpertApp.propTypes = {\n\n// }\n\nexport default GifExpertApp\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}